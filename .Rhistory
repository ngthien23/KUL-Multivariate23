install.packages("languageserver")
install.packages(c("vroom", "xml2"))
library(languageserver)
remove.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
install.packages("tidyverse", "survival", "KMsurv", "survminer")
install.packages("tidyverse", "survival", "KMsurv", "survminer")
install.packages("tidyverse", "KMsurv", "survminer")
install.packages("tidyverse", "KMsurv", "survminer", dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("tidyverse")
install.packages("KMsurv")
install.packages("survminer")
install.packages("languageserver")
install.packages("lazyeval")
install.packages(c("askpass", "broom", "bslib", "cachem", "cpp11", "curl", "cyclocomp", "dbplyr", "digest", "dplyr", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "jsonlite", "knitr", "labeling", "languageserver", "lintr", "lme4", "markdown", "MatrixModels", "minqa", "mvtnorm", "openssl", "pkgload", "prettyunits", "processx", "purrr", "quantreg", "Rcpp", "readxl", "rematch", "remotes", "rmarkdown", "rstudioapi", "sass", "styler", "sys", "testthat", "tinytex", "tzdb", "uuid", "vctrs", "viridisLite", "waldo", "xfun", "xml2"))
install.packages("mnormt")
install.packages("copula")
install.packages("candisc")
setwd("C:/Users/camd1/OneDrive - KU Leuven/2. Master of Statistics and Data Science 22-24/Year 1/Semester 1/Multivariate Statistics/Assignments")
library(psych)
library(lavaan)
library(candisc)
library(dplyr)
#function composite reliability
compositerel<-function(x){
A<-(sum(x))^2
B<-sum(1-x^2)
return(A/(A+B))
}
load("ess.Rdata")
names(ess)[2:14]<-c("sotru1","sotru2","sotru3","truin1","truin2","truin3","truin4",
"webe1","webe2","webe3","webe4","webe5","webe6")
centered_ess <- ess %>%
mutate(across(2:14, ~ . - mean(., na.rm = TRUE)))
covmat<-cov(centered_ess[-1])
##################################
# Question a: fit centered data
##################################
##specify model with 3 correlated factors
cfa1<-'sotru =~NA*+sotru1+sotru2+sotru3
truin =~NA*truin1+truin2+truin3+truin4
webe  =~NA*webe1+webe2+webe3+webe4+webe5+webe6
sotru ~~1*sotru
truin ~~1*truin
webe  ~~1*webe'
#fit model on covariance matrix
fitcfa1<-cfa(cfa1,sample.cov=covmat,sample.nobs=4046)
#summary(fitcfa1,fit.measures=TRUE,std=TRUE)
#fit measures
fitmeasures(fitcfa1,c("chisq","df","pvalue","cfi","tli","rmsea","srmr"))
#standardized solution
d<-standardizedSolution(fitcfa1)
d
factorscore<-c("sotru","truin","webe")
#composite reliability
reliability<-round(c(compositerel(d[1:3,4]),compositerel(d[4:6,4]),compositerel(d[7:9,4])),3)
#average variance extracted
average_var_extracted<-round(c(mean(d[1:3,4]^2),mean(d[4:6,4]^2),mean(d[7:9,4]^2)),3)
#maximum shared variance
max_shared_var<-round(c(max(d[c(22,23),4]^2),max(d[c(22,24),4]^2),max(d[c(23,24),4]^2)),3)
data.frame(factorscore,reliability,average_var_extracted,max_shared_var)
##################################
# Question b: modification indices
# (add correlated errors for pairs of items)
##################################
modificationIndices(fitcfa1)
cfa2<-'sotru =~NA*sotru1+sotru2+sotru3
truin =~NA*truin1+truin2+truin3+truin4
webe  =~NA*webe1+webe2+webe3+webe4+webe5+webe6
sotru ~~1*sotru
truin ~~1*truin
webe  ~~1*webe
truin1 ~~ truin3
truin1 ~~ truin4
truin2 ~~ truin3
truin2 ~~ truin4
webe1 ~~ webe2
webe2 ~~ webe3
webe3 ~~ webe4
webe3 ~~ webe5
webe4 ~~ webe5'
#fit model on covariance matrix
fitcfa2<-cfa(cfa2,sample.cov=covmat,sample.nobs=4046)
#summary(fitcfa1,fit.measures=TRUE,std=TRUE)
#fit measures
fitmeasures(fitcfa2,c("chisq","df","pvalue","cfi","tli","rmsea","srmr"))
##################################
# Question c: fit raw data
##################################
sem1<-'sotru =~NA*sotru1+sotru2+sotru3
truin =~NA*truin1+truin2+truin3+truin4
webe  =~NA*webe1+webe2+webe3+webe4+webe5+webe6
sotru ~~1*sotru
truin ~~1*truin
webe  ~~1*webe
truin1 ~~ truin3
truin1 ~~ truin4
truin2 ~~ truin3
truin2 ~~ truin4
webe1 ~~ webe2
webe2 ~~ webe3
webe3 ~~ webe4
webe3 ~~ webe5
webe4 ~~ webe5
webe ~ sotru + truin'
sem2<-'sotru =~NA*sotru1+sotru2+sotru3
truin =~NA*truin1+truin2+truin3+truin4
webe  =~NA*webe1+webe2+webe3+webe4+webe5+webe6
sotru ~~1*sotru
truin ~~1*truin
webe  ~~1*webe
truin1 ~~ a*truin3
truin1 ~~ b*truin4
truin2 ~~ c*truin3
truin2 ~~ d*truin4
webe1 ~~ e*webe2
webe2 ~~ f*webe3
webe3 ~~ g*webe4
webe3 ~~ h*webe5
webe4 ~~ i*webe5
webe ~ j*sotru + k*truin'
# Configural measurement invariance model with country-specific regression
config1 <- sem(sem1, data = ess, group = "cntry")
#summary(config1,fit.measures=TRUE,std=TRUE)
#standardizedSolution(config1)
# Configural measurement invariance model with country-specific regression and equality constraints
config2 <- sem(sem2, data = ess, group = "cntry")
#summary(config2,fit.measures=TRUE,std=TRUE)
#standardizedSolution(config2)
# Metric measurement invariance model with country-specific regression
metric1 <- sem(sem1, data = ess, group = "cntry", group.equal="loadings")
#summary(metric1,fit.measures=TRUE,std=TRUE)
#standardizedSolution(metric1)
# Metric measurement invariance model with country-specific regression and equality constraints
metric2 <- sem(sem2, data = ess, group = "cntry", group.equal="loadings")
#summary(metric2,fit.measures=TRUE,std=TRUE)
#standardizedSolution(metric2)
# Fit measures
fitconfig1 <- fitmeasures(config1,c("chisq","df","pvalue","cfi","tli","rmsea","srmr","aic","bic"))
fitconfig2 <- fitmeasures(config2,c("chisq","df","pvalue","cfi","tli","rmsea","srmr","aic","bic"))
fitmetric1 <- fitmeasures(metric1,c("chisq","df","pvalue","cfi","tli","rmsea","srmr","aic","bic"))
fitmetric2 <- fitmeasures(metric2,c("chisq","df","pvalue","cfi","tli","rmsea","srmr","aic","bic"))
fit<-rbind(fitconfig1,fitconfig2,fitmetric1,fitmetric2)
rownames(fit)<-c("config1","config2","metric1","metric2")
round(fit,3)
standardizedSolution(fitcfa2)
d<-standardizedSolution(fitcfa2)
d
factorscore<-c("sotru","truin","webe")
#composite reliability
reliability<-round(c(compositerel(d[1:3,4]),compositerel(d[4:6,4]),compositerel(d[7:9,4])),3)
#average variance extracted
average_var_extracted<-round(c(mean(d[1:3,4]^2),mean(d[4:6,4]^2),mean(d[7:9,4]^2)),3)
#maximum shared variance
max_shared_var<-round(c(max(d[c(22,23),4]^2),max(d[c(22,24),4]^2),max(d[c(23,24),4]^2)),3)
data.frame(factorscore,reliability,average_var_extracted,max_shared_var)
